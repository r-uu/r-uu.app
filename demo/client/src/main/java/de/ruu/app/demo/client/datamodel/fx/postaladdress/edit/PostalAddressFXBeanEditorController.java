package de.ruu.app.demo.client.datamodel.fx.postaladdress.edit;

import de.ruu.app.demo.client.datamodel.fx.postaladdress.PostalAddressFXBean;
import de.ruu.lib.fx.comp.DefaultFXCViewController;
import jakarta.inject.Inject;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;

import java.util.Optional;

import static java.util.Objects.isNull;

/**
 * Java FX Component View Controller
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewController} at 2024.07.31 16:12:20:229
 */
class PostalAddressFXBeanEditorController extends DefaultFXCViewController implements PostalAddressFXBeanEditorService
{
	private ObjectProperty<PostalAddressFXBean> postalAddress;

	@FXML private Label lblCity;
	@FXML private Label lblCountry;
	@FXML private Label lblPostalCode;
	@FXML private Label lblStateOrProvince;
	@FXML private Label lblStreet;
	@FXML private Label lblStreetNumber;
	@FXML private Label lblType;

	@FXML private TextField tfCity;
	@FXML private TextField tfCountry;
	@FXML private TextField tfPostalCode;
	@FXML private TextField tfStateOrProvince;
	@FXML private TextField tfStreet;
	@FXML private TextField tfStreetNumber;
	@FXML private TextField tfType;

	@Inject private PostalAddressFXBeanEditor editor;

	PostalAddressFXBeanEditorController()
	{
		postalAddress = new SimpleObjectProperty<>();
	}

	@Override @FXML protected void initialize()
	{
		postalAddress = new SimpleObjectProperty<>();
		postalAddress.addListener((obs, old, newValue) -> onPostalAddressChanged(newValue));
		tfCity.requestFocus();
	}

	@Override public Optional<PostalAddressFXBean> postalAddress() { return Optional.of(postalAddress.getValue()); }

	@Override public void postalAddress(PostalAddressFXBean postalAddress) { this.postalAddress.set(postalAddress); }

	private void onPostalAddressChanged(PostalAddressFXBean newValue)
	{
		if (isNull(newValue))
		{
			tfCity           .setText(null);
			tfCountry        .setText(null);
			tfPostalCode     .setText(null);
			tfStateOrProvince.setText(null);
			tfStreet         .setText(null);
			tfStreetNumber   .setText(null);
			tfType           .setText(null);
		}
		else
		{
			tfCity           .textProperty().bindBidirectional(newValue.city           ());
			tfCountry        .textProperty().bindBidirectional(newValue.country        ());
			tfPostalCode     .textProperty().bindBidirectional(newValue.postalCode     ());
			tfStateOrProvince.textProperty().bindBidirectional(newValue.stateOrProvince());
			tfStreet         .textProperty().bindBidirectional(newValue.street         ());
			tfStreetNumber   .textProperty().bindBidirectional(newValue.streetNumber   ());
			tfType           .textProperty().bindBidirectional(newValue.type           ());
		}
	}
}