package de.ruu.app.jeeeraaah.common;

import de.ruu.lib.jpa.core.mapstruct.AbstractMappedDTO;
import de.ruu.lib.util.Strings;
import jakarta.annotation.Nullable;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;

import java.time.Duration;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashSet;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

import static java.util.Objects.isNull;
import static lombok.AccessLevel.PROTECTED;

@EqualsAndHashCode(callSuper = true)
@ToString(callSuper = true)
@Slf4j
@Getter                   // generate getter methods for all fields using lombok unless configured otherwise ({@code
                          // @Getter(AccessLevel.NONE}))
@Setter                   // generate setter methods for all fields using lombok unless configured otherwise ({@code
                          // @Setter(AccessLevel.NONE}))
@Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes
                          // with ide, fluent accessors will (usually / by default) be ignored by mapstruct
//@RequiredArgsConstructor// provide handmade required args constructor to properly handle relationships
@NoArgsConstructor(access = PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, mapstruct, ...
public class TaskDTO extends AbstractMappedDTO<TaskEntity> implements Task
{
	/** mutable non-null */
	// no lombok-generation of setter because of additional validation in manually created method
	@NonNull
	@Setter(AccessLevel.NONE)
	private String          name;
	@Nullable
	private String          description;
	@Nullable
	private LocalDate       startEstimated;
	@Nullable
	private LocalDate       finishEstimated;
	@Nullable
	private Duration        effortEstimated;
	@Nullable
	private LocalDate       startActual;
	@Nullable
	private LocalDate       finishActual;
	@Nullable
	private Duration        effortActual;

	/** mutable, but not nullable */
	@NonNull
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	private TaskGroupDTO taskGroup;

	/**
	 * prevent direct access to this modifiable set from outside this class, use {@link #addPredecessor(TaskDTO)} and
	 * {@link #removePredecessor(TaskDTO)} to modify the set
	 * <p>
	 * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db
	 * (lazy)
	 */
	@Nullable
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns unmodifiable
	@Setter(AccessLevel.NONE) // no setter at all
	private Set<TaskDTO>    predecessors;

	/**
	 * prevent direct access to this modifiable set from outside this class, use {@link #addSuccessor(TaskDTO)} and
	 * {@link #removeSuccessor(TaskDTO)} to modify the set
	 * <p>
	 * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db
	 * (lazy)
	 */
	@Nullable
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns unmodifiable
	@Setter(AccessLevel.NONE) // no setter at all, use add method instead
	private Set<TaskDTO>    successors;

	/**
	 * prevent direct access to this modifiable set from outside this class, use {@link #addChild(TaskDTO)} and
	 * {@link #removeChild(TaskDTO)} to modify the set
	 * <p>
	 * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db
	 * (lazy)
	 */
	@Nullable
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns unmodifiable
	@Setter(AccessLevel.NONE) // no setter at all, use add method instead
	private Set<TaskDTO>    children;

	/** mutable nullable */
	@Nullable
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns optional
	@Setter(AccessLevel.NONE) // provide handmade setter that handles bidirectional relation properly
	@ManyToOne
	@JoinColumn(name = "idParent")
	private TaskDTO         parent;

	/** provide handmade required args constructor to properly handle relationships */
	public TaskDTO(@NonNull TaskGroupDTO taskGroup, @NonNull String name)
	{
		this.taskGroup = taskGroup;
		name(name);
		taskGroup.addTask(this);
	}

	////////////////////////////////////////////////////////////////////////
	// fluent style accessors generated by lombok if not specified otherwise
	////////////////////////////////////////////////////////////////////////
	/**
	 * manually created fluent setter with extra parameter check (see throws documentation)
	 * @param name non-null, non-empty, non-blank
	 * @return {@code this}
	 * @throws IllegalArgumentException if {@code name} parameter is empty or blank
	 * @throws NullPointerException     if {@code name} parameter is {@code null}
	 */
	@NonNull
	public TaskDTO name(@NonNull String name)
	{
		if (Strings.isEmptyOrBlank(name)) throw new IllegalArgumentException("name must not be empty nor blank");
		this.name = name;
		return this;
	}

	/** @throws IllegalArgumentException if {@code optionalParent} is {@code this} */
	@NonNull
	public TaskDTO parent(@Nullable TaskDTO parent)
	{
		if (parent == this) throw new IllegalArgumentException("optionalParent must not be this");

		this.parent = parent;

		if (parent != null)
				parent.nonNullChildren().add(this);

		return this;
	}

	/** @return {@link #predecessors} wrapped in unmodifiable */
	@Override
	@NonNull
	public Optional<Set<? extends Task>> predecessors()
	{
		Optional<Set<TaskDTO>> predecessors = optionalPredecessors();
		if (predecessors.isPresent())
				return Optional.of(Collections.unmodifiableSet(predecessors.get()));
		return Optional.empty();
	}

	/** @return {@link #successors} wrapped in unmodifiable */
	@Override
	@NonNull
	public Optional<Set<? extends Task>> successors()
	{
		Optional<Set<TaskDTO>> successors = optionalSuccessors();
		if (successors.isPresent())
				return Optional.of(Collections.unmodifiableSet(successors.get()));
		return Optional.empty();
	}

	@Override
	public @NonNull Optional<TaskDTO> optionalParent() { return Optional.ofNullable(parent); }

	/** @return {@link #predecessors} wrapped in unmodifiable */
	@Override
	@NonNull
	public Optional<Set<? extends Task>> children()
	{
		Optional<Set<TaskDTO>> children = optionalChildren();
		if (children.isPresent())
				return Optional.of(Collections.unmodifiableSet(children.get()));
		return Optional.empty();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	// java bean style accessors for those who do not work with fluent style accessors (mapstruct)
	//////////////////////////////////////////////////////////////////////////////////////////////
	@NonNull
	public String    getName()                                     { return          name();            }
	public void      setName(  @NonNull String     name)           { name           (name);             }
	@Nullable
	public String    getDescription()                              { return          description();     }
	public void      setDescription(    String     description)    { description    (description);      }
	@Nullable
	public LocalDate getStartEstimated()                           { return          startEstimated();  }
	public void      setStartEstimated( LocalDate  startEstimated) { startEstimated (startEstimated);   }
	@Nullable
	public LocalDate getFinishEstimated()                          { return          finishEstimated(); }
	public void      setFinishEstimated(LocalDate finishEstimated) { finishEstimated(finishEstimated);  }
	@Nullable
	public Duration  getEffortEstimated()                          { return          effortEstimated(); }
	public void      setEffortEstimated(Duration  effortEstimated) { effortEstimated(effortEstimated);  }
	@Nullable
	public LocalDate getStartActual()                              { return          startActual();     }
	public void      setStartActual(    LocalDate startActual)     { startActual    (startActual);      }
	@Nullable
	public LocalDate getFinishActual()                             { return          finishActual();    }
	public void      setFinishActual(   LocalDate finishActual)    { finishActual   (finishActual);     }
	@Nullable
	public Duration  getEffortActual()                             { return          effortActual();    }
	public void      setEffortActual(    Duration effortActual)    { effortActual   (effortActual);     }
//	@Nullable
//	public TaskDTO   getParent()                                   { return          optionalParent;            }
//	public void      setParent(          TaskDTO  optionalParent)          { optionalParent         (optionalParent);           }

	///////////////////////
	// additional accessors
	///////////////////////
	/** @return optional unmodifiable */
	public Optional<Set<TaskDTO>> optionalPredecessors()
	{
		if (Objects.isNull(predecessors)) return Optional.empty();
		return Optional.of(Collections.unmodifiableSet(predecessors));
	}

	/** @return optional unmodifiable */
	public Optional<Set<TaskDTO>> optionalSuccessors()
	{
		if (Objects.isNull(successors)) return Optional.empty();
		return Optional.of(Collections.unmodifiableSet(successors));
	}

	/** @return optional unmodifiable */
	public Optional<Set<TaskDTO>> optionalChildren()
	{
		if (Objects.isNull(children)) return Optional.empty();
		return Optional.of(Collections.unmodifiableSet(children));
	}

	////////////////////////
	// relationship handling
	////////////////////////
	/**
	 * @param dto the {@link Task} to be added as predecessor
	 * @return {@code this}
	 * @throws IllegalArgumentException if {@code dto} is identical to {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is already predecessor of {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is a child of {@code this} task
	 * @throws IllegalStateException    if {@code this} could not be added to {@link #successors} of {@code dto}
	 */
	@NonNull
	public TaskDTO addPredecessor(@NonNull TaskDTO dto)
	{
		if (dto == this)
				throw new IllegalArgumentException("dto can not be predecessor of itself");
		if (successorsContains(dto))
				throw new IllegalArgumentException(
						"dto can not be predecessor and successor for the same task at the same time");
		if (childrenContains(dto))
				throw new IllegalArgumentException("a task's child can not be predecessor for it's optionalParent");

		if (predecessorsContains(dto)) return this; // no-op

		// update bidirectional relation
		if (dto.nonNullSuccessors().add(this))
		{
			nonNullPredecessors().add(dto);
			return this;
		}

		throw new IllegalStateException("could not add this to successors of dto");
	}

	/**
	 * @param dto the {@link Task} to be added as predecessor
	 * @return {@code true} if operation succeeded, {@code false} otherwise
	 * @throws IllegalArgumentException if {@code dto} is identical to {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is already predecessor of {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is a child of {@code this} task
	 * @throws IllegalStateException    if {@code this} could not be added to {@link #predecessors()} of {@code dto}
	 */
	@NonNull
	public TaskDTO addSuccessor(@NonNull TaskDTO dto)
	{
		if (dto == this)
				throw new IllegalArgumentException("dto can not be successor of itself");
		if (predecessorsContains(dto))
				throw new IllegalArgumentException(
						"dto can not be predecessor and successor for the same task at the same time");
		if (childrenContains(dto))
				throw new IllegalArgumentException("a task's child can not be successor for it's optionalParent");

		if (successorsContains(dto)) return this; // no-op

		// update bidirectional relation
		if (dto.nonNullPredecessors().add(this))
		{
			nonNullSuccessors().add(dto);
			return this;
		}

		throw new IllegalStateException("could not add this to predecessors of dto");
	}

	/**
	 * @param dto the {@link Task} to be added as child
	 * @return {@code true} if operation succeeded, {@code false} otherwise
	 * @throws IllegalArgumentException if {@code dto} is identical to {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is a predecessor of {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is a successor of {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is already child of {@code this} task
	 */
	@NonNull
	public TaskDTO addChild(@NonNull TaskDTO dto)
	{
		if (dto == this)
				throw new IllegalArgumentException("dto can not be child of itself");
		if (predecessorsContains(dto))
				throw new IllegalArgumentException(
						"dto can not be predecessor for the same task at the same time");
		if (successorsContains(dto))
				throw new IllegalArgumentException(
						"dto can not be successor for the same task at the same time");
		if (childrenContains(dto))
				throw new IllegalArgumentException("a task's child can not be successor for it's optionalParent");

		if (childrenContains(dto)) return this; // no-op

		// update bidirectional relation
		dto.parent = this;
		nonNullChildren().add(dto);

		return this;
	}

	public boolean removePredecessor(@NonNull TaskDTO dto)
	{
		if (dto.successors.remove(this))
				return predecessors.remove(dto);

		throw new IllegalStateException("could not remove this from successors of dto");
	}

	public boolean removeSuccessor(@NonNull TaskDTO dto)
	{
		if (dto.predecessors.remove(this))
				return successors.remove(dto);

		throw new IllegalStateException("could not remove this from predecessors of dto");
	}

	public boolean removeChild(@NonNull TaskDTO dto)
	{
		TaskDTO entityParent = dto.parent;

		dto.parent = null;
		boolean result = children.remove(dto);

		if (result == false)
		{
			// rollback changes
			dto.parent = entityParent;
		}
		return result;
	}

	@Override public void beforeMapping(@NonNull TaskEntity input)
	{
		super.beforeMapping(input);

		Optional<Set<TaskEntity>> inputOptionalPredecessors = input.optionalPredecessors();
		Optional<Set<TaskEntity>> inputOptionalSuccessors   = input.optionalSuccessors  ();
		Optional<Set<TaskEntity>> inputOptionalChildren     = input.optionalChildren    ();
		Optional<    TaskEntity>  inputOptionalParent       = input.optionalParent      ();

		if (inputOptionalPredecessors .isPresent())
				inputOptionalPredecessors .get().forEach(e -> addPredecessor(e.toTarget()));
		if (inputOptionalSuccessors   .isPresent())
				inputOptionalSuccessors   .get().forEach(e -> addSuccessor  (e.toTarget()));
		if (inputOptionalChildren     .isPresent())
				inputOptionalChildren     .get().forEach(e -> addChild      (e.toTarget()));
		if (inputOptionalParent       .isPresent())
				parent(inputOptionalParent.get().toTarget());
	}

	@Override public void afterMapping(@NonNull TaskEntity input) { }

	@Override public @NonNull TaskEntity toSource() { return Mapper.INSTANCE.map(this); }

	private Set<TaskDTO> nonNullPredecessors()
	{
		if (isNull(predecessors)) predecessors = new HashSet<>();
		return predecessors;
	}

	private Set<TaskDTO> nonNullSuccessors()
	{
		if (isNull(successors)) successors = new HashSet<>();
		return successors;
	}

	private Set<TaskDTO> nonNullChildren()
	{
		if (isNull(children)) children = new HashSet<>();
		return children;
	}

	/** {@code null} safe check for containment */
	private boolean predecessorsContains(TaskDTO entity)
	{
		if (isNull(predecessors)) return false;
		return predecessors.contains(entity);
	}

	/** {@code null} safe check for containment */
	private boolean successorsContains(TaskDTO entity)
	{
		if (isNull(successors)) return false;
		return successors.contains(entity);
	}

	/** {@code null} safe check for containment */
	private boolean childrenContains(TaskDTO entity)
	{
		if (isNull(children)) return false;
		return children.contains(entity);
	}
}