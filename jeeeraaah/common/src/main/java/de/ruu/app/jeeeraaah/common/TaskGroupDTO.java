package de.ruu.app.jeeeraaah.common;

import de.ruu.lib.jpa.core.mapstruct.AbstractMappedDTO;
import de.ruu.lib.util.Strings;
import jakarta.annotation.Nullable;
import lombok.*;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;

import java.util.*;

import static java.util.Objects.isNull;
import static lombok.AccessLevel.PROTECTED;

@EqualsAndHashCode(callSuper = true)
@ToString(callSuper = true)
@Slf4j
@Getter                   // generate getter methods for all fields using lombok unless configured otherwise ({@code
// @Getter(AccessLevel.NONE}))
@Setter                   // generate setter methods for all fields using lombok unless configured otherwise ({@code
// @Setter(AccessLevel.NONE}))
@Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes
// with ide, fluent accessors will (usually / by default) be ignored by mapstruct
@RequiredArgsConstructor
@NoArgsConstructor(access = PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, mapstruct, ...
public class TaskGroupDTO extends AbstractMappedDTO<TaskGroupEntity> implements TaskGroup
{
	/** mutable non-null */
	// no lombok-generation of setter because of additional validation in manually created method
	@NonNull
	@Setter(AccessLevel.NONE)
	private String name;

	/**
	 * prevent direct access to this modifiable set from outside this class, use {@link #addTask(TaskDTO)} and
	 * {@link #removeTask(TaskDTO)} to modify the set
	 * <p>
	 * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db
	 * (lazy)
	 */
	@Nullable
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns unmodifiable
	@Setter(AccessLevel.NONE) // no setter at all
	private Set<TaskDTO> tasks;

	////////////////////////////////////////////////////////////////////////
	// fluent style accessors generated by lombok if not specified otherwise
	////////////////////////////////////////////////////////////////////////
	/**
	 * manually created fluent setter with extra parameter check (see throws documentation)
	 * @param name non-null, non-empty, non-blank
	 * @return {@code this}
	 * @throws IllegalArgumentException if {@code name} parameter is empty or blank
	 * @throws NullPointerException     if {@code name} parameter is {@code null}
	 */
	@NonNull
	public TaskGroupDTO name(@NonNull String name)
	{
		if (Strings.isEmptyOrBlank(name)) throw new IllegalArgumentException("name must not be empty nor blank");
		this.name = name;
		return this;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	// java bean style accessors for those who do not work with fluent style accessors (mapstruct)
	//////////////////////////////////////////////////////////////////////////////////////////////
	@NonNull
	public String getName()                     { return name(); }
	public void   setName(@NonNull String name) { name(name);    }

	///////////////////////
	// additional accessors
	///////////////////////
	/** @return optional unmodifiable */
	public Optional<Set<TaskDTO>> optionalTasks()
	{
		if (Objects.isNull(tasks)) return Optional.empty();
		return Optional.of(Collections.unmodifiableSet(tasks));
	}

	/** @return {@link #tasks} wrapped in unmodifiable */
	@Override
	@NonNull
	public Optional<Set<? extends Task>> tasks()
	{
		Optional<Set<TaskDTO>> tasks = optionalTasks();
		if (tasks.isPresent())
				return Optional.of(Collections.unmodifiableSet(tasks.get()));
		return Optional.empty();
	}

	@Override public void beforeMapping(@NonNull TaskGroupEntity input) { }
	@Override public void afterMapping (@NonNull TaskGroupEntity input) { }

	@Override public @NonNull TaskGroupEntity toSource() { return Mapper.INSTANCE.map(this); }

	////////////////////////
	// relationship handling
	////////////////////////
	/**
	 * @param dto the {@link Task} to be added as predecessor
	 * @return {@code this}
	 * @throws IllegalStateException if {@code dto} could not be removed from {@link #tasks}
	 */
	@NonNull
	public TaskGroupDTO addTask(@NonNull TaskDTO dto)
	{
		// update bidirectional relation
		if (nonNullTasks().add(dto))
		{
			dto.taskGroup(this);
			return this;
		}

		throw new IllegalStateException("could not add task dto");
	}


	public boolean removeTask(@NonNull TaskDTO dto)
	{
		if (optionalTasks().isPresent())
				return optionalTasks().get().remove(dto);
		return false;
	}

	private Set<TaskDTO> nonNullTasks()
	{
		if (isNull(tasks)) tasks = new HashSet<>();
		return tasks;
	}
}