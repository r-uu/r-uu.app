package de.ruu.app.jeeeraaah.client.fx.task;

import de.ruu.app.jeeeraaah.common.Task;
import de.ruu.app.jeeeraaah.common.TaskGroup;
import jakarta.annotation.Nullable;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;

import java.time.Duration;
import java.time.LocalDate;
import java.util.Optional;
import java.util.Set;

import static lombok.AccessLevel.PROTECTED;

/**
 * JavaBean {@link TaskBean}
 * <p>
 * generated by {@code de.ruu.lib.gen.java.bean.BeanGenerator} at 2024.09.22 16:44:27:044
 */
@EqualsAndHashCode
@ToString(callSuper = true)
@Slf4j
@Getter                   // generate getter methods for all fields using lombok unless configured otherwise ({@code
// @Getter(AccessLevel.NONE}))
@Setter                   // generate setter methods for all fields using lombok unless configured otherwise ({@code
// @Setter(AccessLevel.NONE}))
@Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes
// with ide, fluent accessors will (usually / by default) be ignored by mapstruct
//@RequiredArgsConstructor// provide handmade required args constructor to properly handle relationships
@AllArgsConstructor
@RequiredArgsConstructor
@NoArgsConstructor(access = PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, jpa, mapstruct, ...
@Builder(toBuilder = true)
public class TaskBean implements Task
{
	private Long                id;
	/** mutable, but not nullable */
	// no java-bean-style getter here, mapstruct will ignore fields without bean-style-accessor so mapping can be
	// controlled in beforeMapping
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@NonNull
	@Setter
	private TaskGroup           taskGroup;
	/** mutable non-null */
	// no lombok-generation of setter because of additional validation in manually created method
	@NonNull
	@Setter(AccessLevel.NONE)
	private String              name;
	@Nullable
	private String              description;
	@Nullable
	private LocalDate           startEstimated;
	@Nullable
	private LocalDate           startActual;
	@Nullable
	private LocalDate           finishEstimated;
	@Nullable
	private LocalDate           finishActual;
	@Nullable
	private Duration            effortEstimated;
	@Nullable
	private Duration            effortActual;
	@Nullable
	private Task                parent;
	@Nullable
	private Set<? extends Task> children;
	@Nullable
	private Set<? extends Task> predecessors;
	@Nullable
	private Set<? extends Task> successors;

	public Optional<String>    descriptionOptional    () { return Optional.ofNullable(            description    ); }
	public Optional<LocalDate> startEstimatedOptional () { return Optional.ofNullable(            startEstimated ); }
	public Optional<LocalDate> finishEstimatedOptional() { return Optional.ofNullable(            finishEstimated); }
	public Optional<LocalDate> startActualOptional    () { return Optional.ofNullable(            startActual    ); }
	public Optional<LocalDate> finishActualOptional   () { return Optional.ofNullable(            finishActual   ); }
	public Optional<Duration>  effortEstimatedOptional() { return Optional.ofNullable(            effortEstimated   ); }
	public Optional<Duration>  effortActualOptional   () { return Optional.ofNullable(            effortActual   ); }
	public Optional<Task>      parentOptional         () { return Optional.ofNullable(            parent         ); }
	public Optional<Set<Task>> childrenOptional       () { return Optional.ofNullable((Set<Task>) children       ); }
	public Optional<Set<Task>> predecessorsOptional   () { return Optional.ofNullable((Set<Task>) predecessors   ); }
	public Optional<Set<Task>> successorsOptional     () { return Optional.ofNullable((Set<Task>) successors     ); }

	public Optional<Task> parent                      () { return parentOptional      (); }
	public Optional<Set<Task>> children               () { return childrenOptional    (); }
	public Optional<Set<Task>> predecessors           () { return predecessorsOptional(); }
	public Optional<Set<Task>> successors             () { return successorsOptional  (); }

}