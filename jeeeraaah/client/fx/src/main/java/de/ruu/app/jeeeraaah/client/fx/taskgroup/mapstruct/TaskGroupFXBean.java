package de.ruu.app.jeeeraaah.client.fx.taskgroup.mapstruct;

import de.ruu.app.jeeeraaah.client.fx.task.TaskFXBean;
import de.ruu.app.jeeeraaah.common.jpadto.TaskGroupEntity;
import jakarta.annotation.Nullable;
import javafx.beans.property.SetProperty;
import javafx.beans.property.SimpleSetProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;
import lombok.experimental.Accessors;

import java.util.Collections;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import static java.util.Objects.isNull;

@Getter
@Accessors(fluent = true)
public class TaskGroupFXBean
		implements
				TaskGroupEntity<TaskFXBean>,
				BiMappedFXTarget<TaskGroupBean>
{
	@Setter(AccessLevel.NONE) @Nullable private Long  id;
	@Setter(AccessLevel.NONE) @Nullable private Short version;

	@NonNull  private final StringProperty nameProperty = new SimpleStringProperty();
	@Nullable private       StringProperty descriptionProperty;

	@Nullable private SetProperty<TaskFXBean> tasksProperty;

	/** necessary for mapstruct, ... */
	protected TaskGroupFXBean() { }

	public TaskGroupFXBean(@NonNull TaskGroupBean taskGroup)
	{
		id      = taskGroup.id     ();
		version = taskGroup.version();

		nameProperty.setValue(taskGroup.name());

		taskGroup.description().ifPresent(descriptionProperty::setValue);

		taskGroup.tasks().ifPresent
		(
				vs ->
				{
					tasksProperty = new SimpleSetProperty<>();
					vs.forEach(v -> tasksProperty.add(new TaskFXBean(v)));
				}
		);
	}

	// callbacks for mapstruct
	public void beforeMapping(@NonNull TaskGroupBean source)
	{
		id      = source.id     ();
		version = source.version();
		source.tasks().ifPresent(vs -> vs.forEach(v -> addTask(MapperFX.INSTANCE.lookupOrCreate(v))));
	}
	public void afterMapping (@NonNull TaskGroupBean source) { }

	@Override public @NonNull TaskGroupBean toFXSource() { return MapperFX.INSTANCE.map(this); }

	////////////////////////////////////////////////////////////////////////
	// fluent style accessors generated by lombok if not specified otherwise
	////////////////////////////////////////////////////////////////////////

	@Override @NonNull public String          name() { return nameProperty.getValue(); }
	@Override @NonNull public TaskGroupFXBean name(@NonNull String name)
	{
		nameProperty.setValue(name);
		return this;
	}

	@Override @NonNull public Optional<String> description()
	{
		if (isNull(descriptionProperty)) return Optional.empty();
		return Optional.of(descriptionProperty.getValue());
	}

	@Override @NonNull public TaskGroupFXBean description(@Nullable String description)
	{
		if (isNull(descriptionProperty)) descriptionProperty = new SimpleStringProperty(description);
		return this;
	}

	@Override @NonNull public Optional<Set<TaskFXBean>> tasks()
	{
		if (isNull(tasksProperty)) return Optional.empty();
		return Optional.of(Collections.unmodifiableSet(tasksProperty.getValue()));
	}

	@Override public boolean addTask(TaskFXBean task)
	{
		if (task.taskGroup() == this) return nonNullTasks().add(task);
		return false;
	}

	@Override public boolean removeTask(TaskFXBean task)
	{
		return tasks().map(ts -> ts.remove(task)).orElse(false);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	// java bean style accessors for those who do not work with fluent style accessors (mapstruct)
	//////////////////////////////////////////////////////////////////////////////////////////////

	public String getName()                     { return nameProperty.get(); }
	public void   setName(@NonNull String name) {        name(name);         }

	@Nullable
	public String getDescription() { return descriptionProperty == null ? null : descriptionProperty.get(); }
	public void   setDescription(String description) { descriptionProperty = new SimpleStringProperty(description); }

	private @NonNull Set<TaskFXBean> nonNullTasks()
	{
		if (isNull(tasksProperty)) tasksProperty = new SimpleSetProperty<>();
		return new HashSet<>(tasksProperty.getValue());
	}
}