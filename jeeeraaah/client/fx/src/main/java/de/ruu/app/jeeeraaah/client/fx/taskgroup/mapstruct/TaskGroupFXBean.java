package de.ruu.app.jeeeraaah.client.fx.taskgroup.mapstruct;

import de.ruu.app.jeeeraaah.common.dto.TaskGroupEntityDTO;
import de.ruu.app.jeeeraaah.common.jpadto.TaskGroupEntity;
import jakarta.annotation.Nullable;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableSet;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.mapstruct.BeforeMapping;

import java.util.Collections;
import java.util.Optional;
import java.util.Set;

import static java.util.Objects.isNull;

@Getter
@Accessors(fluent = true)
public class TaskGroupFXBean
		implements
				TaskGroupEntity<TaskFXBean>
{
	@Setter(AccessLevel.NONE) @Nullable private Long  id;
	@Setter(AccessLevel.NONE) @Nullable private Short version;

	private final StringProperty nameProperty        = new SimpleStringProperty();
	private final StringProperty descriptionProperty = new SimpleStringProperty();

	@Nullable private ObservableSet<TaskFXBean> tasks;
//	@Nullable private SetProperty<TaskFXBean> tasksProperty;

//	/** necessary for mapstruct, ... */
//	protected TaskGroupFXBean() { }

//	public TaskGroupFXBean(@NonNull TaskGroupBean taskGroup)
//	{
//		id      = taskGroup.id     ();
//		version = taskGroup.version();
//
//		nameProperty.setValue(taskGroup.name());
//
//		taskGroup.description().ifPresent(d -> descriptionProperty = new SimpleStringProperty(d));
//
//		taskGroup.tasks().ifPresent
//		(
//				vs ->
//				{
//					tasksProperty = new SimpleSetProperty<>();
//					vs.forEach(v -> tasksProperty.add(new TaskFXBean(v)));
//				}
//		);
//	}

	public TaskGroupFXBean(@NonNull String name) { name(name); }

	//////////////////////
	// mapstruct callbacks
	//////////////////////

	/** {@link TaskGroupBean} -> {@link TaskGroupFXBean} */
	// callbacks for mapstruct
	@BeforeMapping public void beforeMapping(@NonNull TaskGroupBean source)
	{
		id      = source.id     ();
		version = source.version();

		if (source.tasks().isPresent())
		{
			for (TaskBean task : source.tasks().get())
			{
				addTask(Map_Task_Bean_FXBean.INSTANCE.map(task));
			}
		}
	}
	public void afterMapping (@NonNull TaskGroupBean source) { }

	public @NonNull TaskGroupBean toFXSource() { return Map_TaskGroup_Bean_FXBean.INSTANCE.map(this); }

	////////////////////////////////////////////////////////////////////////
	// fluent style accessors generated by lombok if not specified otherwise
	////////////////////////////////////////////////////////////////////////

	@Override @NonNull public String          name() { return nameProperty.getValue(); }
	@Override @NonNull public TaskGroupFXBean name(@NonNull String name)
	{
		nameProperty.setValue(name);
		return this;
	}

	@Override @NonNull public Optional<String> description() { return Optional.ofNullable(descriptionProperty.getValue()); }

	@Override @NonNull public TaskGroupFXBean description(@Nullable String description)
	{
		descriptionProperty.setValue(description);
		return this;
	}

	@Override @NonNull public Optional<Set<TaskFXBean>> tasks()
	{
		if (isNull(tasks)) return Optional.empty();
		return Optional.of(Collections.unmodifiableSet(tasks));
	}

	@Override public boolean addTask(TaskFXBean task)
	{
		if (task.taskGroup() == this) return nonNullTasks().add(task);
		return false;
	}

	@Override public boolean removeTask(TaskFXBean task)
	{
		return tasks().map(ts -> ts.remove(task)).orElse(false);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	// java bean style accessors for those who do not work with fluent style accessors (mapstruct)
	//////////////////////////////////////////////////////////////////////////////////////////////

	public String getName()                     { return nameProperty.getValue(); }
	public void   setName(@NonNull String name) {        name(name);              }

	@Nullable
	public String getDescription()                   { return descriptionProperty.getValue(); }
	public void   setDescription(String description) {        description(description);       }

	private @NonNull Set<TaskFXBean> nonNullTasks()
	{
		if (isNull(tasks)) tasks = FXCollections.observableSet();
		return tasks;
	}
}