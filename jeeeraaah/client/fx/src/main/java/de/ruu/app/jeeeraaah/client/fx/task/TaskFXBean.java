package de.ruu.app.jeeeraaah.client.fx.task;

import de.ruu.app.jeeeraaah.common.Task;
import de.ruu.app.jeeeraaah.common.TaskGroup;
import de.ruu.app.jeeeraaah.common.dto.TaskDTO;
import de.ruu.app.jeeeraaah.common.dto.TaskGroupDTO;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;

import java.time.Duration;
import java.time.LocalDate;
import java.util.Optional;
import java.util.Set;

/**
 * FXBean {@link TaskFXBean}
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.bean.FXBeanGenerator} at 2024.09.27 14:32:58:117
 */
@AllArgsConstructor
@Builder
@Getter
public class TaskFXBean
{
	private ObjectProperty<Long>                id              = new SimpleObjectProperty<>();
	private ObjectProperty<TaskGroup>           taskGroup       = new SimpleObjectProperty<>();
	private StringProperty                      name            = new SimpleStringProperty();
	private StringProperty                      description     = new SimpleStringProperty();
	private ObjectProperty<LocalDate>           startEstimated  = new SimpleObjectProperty<>();
	private ObjectProperty<LocalDate>           startActual     = new SimpleObjectProperty<>();
	private ObjectProperty<LocalDate>           finishEstimated = new SimpleObjectProperty<>();
	private ObjectProperty<LocalDate>           finishActual    = new SimpleObjectProperty<>();
	private ObjectProperty<Duration>            effortEstimated = new SimpleObjectProperty<>();
	private ObjectProperty<Duration>            effortActual    = new SimpleObjectProperty<>();
	private ObjectProperty<Optional<Task>>      parent          = new SimpleObjectProperty<>();
	private ObjectProperty<Optional<Set<Task>>> children        = new SimpleObjectProperty<>();
	private ObjectProperty<Optional<Set<Task>>> predecessors    = new SimpleObjectProperty<>();
	private ObjectProperty<Optional<Set<Task>>> successors      = new SimpleObjectProperty<>();

	public TaskFXBean(Task task)
	{
		id              = new SimpleObjectProperty<>(task.id());
		taskGroup       = new SimpleObjectProperty<>(task.taskGroup());
		name            = new SimpleStringProperty(  task.name());
		description     = new SimpleStringProperty(  task.description());
		startEstimated  = new SimpleObjectProperty<>(task.startEstimated());
		startActual     = new SimpleObjectProperty<>(task.startActual());
		finishEstimated = new SimpleObjectProperty<>(task.finishEstimated());
		finishActual    = new SimpleObjectProperty<>(task.finishActual());
		effortEstimated = new SimpleObjectProperty<>(task.effortEstimated());
		effortActual    = new SimpleObjectProperty<>(task.effortActual());
		parent          = new SimpleObjectProperty<>(task.parent());
		children        = new SimpleObjectProperty<>(task.children());
		predecessors    = new SimpleObjectProperty<>(task.predecessors());
		successors      = new SimpleObjectProperty<>(task.successors());
	}

	public Task toSource()
	{
		TaskDTO result = new TaskDTO((TaskGroupDTO) taskGroup.getValue(), name.getValue());

		result
				.description(description.getValue())
		    .startEstimated(startEstimated.getValue())
				.startActual(startActual.getValue())
				.finishEstimated(finishEstimated.getValue())
				.finishActual(finishActual.getValue())
				.effortEstimated(effortEstimated.getValue())
				.effortActual(effortActual.getValue())
		;

		if (      parent.getValue().isPresent()) result.parent((TaskDTO) parent.getValue().get());
		if (    children.getValue().isPresent())
				    children.getValue().get().stream().forEach(c -> result.addChild((TaskDTO) c));
		if (predecessors.getValue().isPresent())
				predecessors.getValue().get().stream().forEach(p -> result.addPredecessor((TaskDTO) p));
		if (  successors.getValue().isPresent())
				  successors.getValue().get().stream().forEach(s -> result.addSuccessor((TaskDTO) s));

		return result;
	}
}