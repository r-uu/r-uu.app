package de.ruu.app.jeeeraaah.client.fx.taskgroup.mapstruct;

import de.ruu.app.jeeeraaah.common.Task;
import de.ruu.app.jeeeraaah.common.jpadto.TaskGroupEntity;
import de.ruu.lib.jpa.core.AbstractEntity;
import de.ruu.lib.mapstruct.BiMappedTarget;
import de.ruu.lib.util.Strings;
import jakarta.annotation.Nullable;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;

import java.util.Collections;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import static java.util.Objects.isNull;

/**
 * JavaBean {@link TaskBean} implementing business logic
 * <p>
 * could as well extend {@link de.ruu.app.jeeeraaah.common.dto.TaskGroupEntityDTO}
 * but would not be persistable easily ...
 */
@EqualsAndHashCode(callSuper = true)
@Getter
@Setter
@Accessors(fluent = true)
@RequiredArgsConstructor
public class TaskGroupBean
		extends AbstractEntity<TaskGroupDTO>
		implements
				TaskGroupEntity<TaskBean>,
				BiMappedTarget<TaskGroupDTO>,
				BiMappedFXSource<TaskGroupFXBean>
{
	@Setter(AccessLevel.NONE)
	@Nullable  private Long  id;
	@Setter(AccessLevel.NONE)
	@Nullable private Short version;

	/** mutable non-null */
	// no lombok-generation of setter because of additional validation in manually created method
	@Setter(AccessLevel.NONE)
	@NonNull  private String name;

	/** mutable nullable */
	@Nullable private String description;

	/**
	 * prevent direct access to this modifiable set from outside this class, use {@link #addTask(TaskBean)} and
	 * {@link #removeTask(TaskBean)} to modify the set
	 * <p>
	 * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db
	 * (lazy)
	 */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns unmodifiable
	@Setter(AccessLevel.NONE) // no setter at all
	@Nullable private Set<TaskBean> tasks;

	///////////////
	// constructors
	///////////////

	/** necessary for mapstruct, ... */
	protected TaskGroupBean() { }

	@Override public void beforeMapping(@NonNull TaskGroupFXBean source)
	{
		mapIdAndVersion(source);
		source.tasks().ifPresent(vs -> vs.forEach(v -> addTask(MapperFX.INSTANCE.lookupOrCreate(v))));
	}
	@Override public void afterMapping (@NonNull TaskGroupFXBean source) { }

	@Override @NonNull public TaskGroupFXBean toFXTarget() { return MapperFX.INSTANCE.lookupOrCreate(this); }

	////////////////////////////////////////////////////////////////////////
	// fluent style accessors generated by lombok if not specified otherwise
	////////////////////////////////////////////////////////////////////////

	/**
	 * manually created fluent setter with extra parameter check (see throws documentation)
	 * @param name non-null, non-empty, non-blank
	 * @return {@code this}
	 * @throws IllegalArgumentException if {@code name} parameter is empty or blank
	 * @throws NullPointerException     if {@code name} parameter is {@code null}
	 */
	@Override @NonNull public TaskGroupBean name(@NonNull String name)
	{
		if (Strings.isEmptyOrBlank(name)) throw new IllegalArgumentException("name must not be empty nor blank");
		this.name = name;
		return this;
	}

	@Override public @NonNull Optional<String> description() { return Optional.ofNullable(description); }

	/** @return optional unmodifiable */
	@Override @NonNull public Optional<Set<TaskBean>> tasks()
	{
		if (isNull(tasks)) return Optional.empty();
		return Optional.of(Collections.unmodifiableSet(tasks));
	}

	///////////////////////
	// additional accessors
	///////////////////////

	@Override public void beforeMapping(@NonNull TaskGroupDTO input) { }
	@Override public void afterMapping (@NonNull TaskGroupDTO input) { }

//	@Override @NonNull public TaskGroupDTO toTarget() { return Mapper.INSTANCE.map(this); }
	@Override @NonNull public TaskGroupDTO toSource() { return Mapper.INSTANCE.map(this); }

	////////////////////////
	// relationship handling
	////////////////////////

	/**
	 * @param task the {@link Task} to be added as predecessor
	 * @return {@code this}
	 */
	@Override public boolean addTask(@NonNull TaskBean task)
	{
		if (nonNullTasks().add(task))
		{
			// update bidirectional relation
			task.taskGroup(this);
			return true;
		}
		return false;
	}

	@Override public boolean removeTask(@NonNull TaskBean task)
	{
		return tasks().map(taskEntityDTOS -> taskEntityDTOS.remove(task)).orElse(false);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	// java bean style accessors for those who do not work with fluent style accessors (mapstruct)
	//////////////////////////////////////////////////////////////////////////////////////////////
	@NonNull
	public String getName()                     { return name(); }
	public void   setName(@NonNull String name) { name(name); }

	@Nullable
	public String getDescription()                             { return description().orElse(null); }
	public void   setDescription(@Nullable String description) { description(description); }
	// do _NOT_ define getter for tasks to avoid handling of tasks by mapstruct automatism

	private Set<TaskBean> nonNullTasks()
	{
		if (isNull(tasks)) tasks = new HashSet<>();
		return tasks;
	}
}