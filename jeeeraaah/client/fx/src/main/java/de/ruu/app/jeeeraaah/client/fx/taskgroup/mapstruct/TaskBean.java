package de.ruu.app.jeeeraaah.client.fx.taskgroup.mapstruct;

import de.ruu.app.jeeeraaah.common.Task;
import de.ruu.app.jeeeraaah.common.dto.TaskEntityDTO;
import de.ruu.app.jeeeraaah.common.jpadto.TaskEntity;
import de.ruu.lib.util.Strings;
import jakarta.annotation.Nullable;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;
import org.mapstruct.AfterMapping;
import org.mapstruct.BeforeMapping;

import java.time.Duration;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import static java.util.Objects.isNull;
import static java.util.Objects.nonNull;

/** JavaBean for implementing business logic */
@EqualsAndHashCode
@ToString(callSuper = true)
@Slf4j
@Getter                   // generate getter methods for all fields using lombok unless configured otherwise ({@code
@Setter                   // generate setter methods for all fields using lombok unless configured otherwise ({@code
@Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes
// with ide, fluent accessors will (usually / by default) be ignored by mapstruct
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, mapstruct, ...
public class TaskBean implements TaskEntity<TaskGroupBean, TaskBean>
{
	@Nullable private Long  id;
	@Nullable private Short version;

	/** mutable, but not nullable */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@NonNull private TaskGroupBean taskGroup;

	/** mutable non-null */
	// no lombok-generation of setter because of additional validation in manually created method
	@NonNull  private String    name;
	@Nullable private String    description;
	@Nullable private LocalDate startEstimated;
	@Nullable private LocalDate startActual;
	@Nullable private LocalDate finishEstimated;
	@Nullable private LocalDate finishActual;
	@Nullable private Duration  effortEstimated;
	@Nullable private Duration  effortActual;

	/** mutable nullable */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns optional
	@Setter(AccessLevel.NONE) // provide handmade setter that handles bidirectional relation properly
	@Nullable private TaskBean parent;

	/**
	 * prevent direct access to this modifiable set from outside this class, use {@link #addChild(TaskBean)} and
	 * {@link #removeChild(TaskBean)} to modify the set
	 * <p>
	 * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db
	 * (lazy)
	 */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns unmodifiable
	@Setter(AccessLevel.NONE) // no setter at all, use add method instead
	@Nullable private Set<TaskBean> children;

	/**
	 * prevent direct access to this modifiable set from outside this class, use {@link #addPredecessor(TaskBean)} and
	 * {@link #removePredecessor(TaskBean)} to modify the set
	 * <p>
	 * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db
	 * (lazy)
	 */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns unmodifiable
	@Setter(AccessLevel.NONE) // no setter at all
	@Nullable private Set<TaskBean> predecessors;

	/**
	 * prevent direct access to this modifiable set from outside this class, use {@link #addSuccessor(TaskBean)} and
	 * {@link #removeSuccessor(TaskBean)} to modify the set
	 * <p>
	 * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db
	 * (lazy)
	 */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns unmodifiable
	@Setter(AccessLevel.NONE) // no setter at all, use add method instead
	@Nullable private Set<TaskBean> successors;

	///////////////
	// constructors
	///////////////

	/** provide handmade required args constructor to properly handle relationships */
	public TaskBean(TaskGroupBean taskGroupBean, @NonNull String name)
	{
		this.taskGroup = taskGroup;
		name(name);
		taskGroup.addTask(this);
	}

	////////////////////////////////////////////////////////////////////////
	// fluent style accessors generated by lombok if not specified otherwise
	////////////////////////////////////////////////////////////////////////

	/**
	 * manually created fluent setter with extra parameter check (see throws documentation)
	 * @param name non-null, non-empty, non-blank
	 * @return {@code this}
	 * @throws IllegalArgumentException if {@code name} parameter is empty or blank
	 * @throws NullPointerException     if {@code name} parameter is {@code null}
	 */
	@NonNull public TaskBean name(@NonNull String name)
	{
		if (Strings.isEmptyOrBlank(name)) throw new IllegalArgumentException("name must not be empty nor blank");
		this.name = name;
		return this;
	}

	@Override @NonNull public Optional<String>        description    () { return Optional.ofNullable(description);     }
	@Override @NonNull public Optional<LocalDate>     startEstimated () { return Optional.ofNullable(startEstimated);  }
	@Override @NonNull public Optional<LocalDate>     finishEstimated() { return Optional.ofNullable(finishEstimated); }
	@Override @NonNull public Optional<LocalDate>     startActual    () { return Optional.ofNullable(startActual);     }
	@Override @NonNull public Optional<LocalDate>     finishActual   () { return Optional.ofNullable(finishActual);    }
	@Override @NonNull public Optional<Duration>      effortEstimated() { return Optional.ofNullable(effortEstimated); }
	@Override @NonNull public Optional<Duration>      effortActual   () { return Optional.ofNullable(effortActual);    }

	@Override @NonNull public Optional<TaskBean> parent         () { return Optional.ofNullable(parent); }

	/** @return {@link #children wrapped in unmodifiable      */
	@Override @NonNull public Optional<Set<TaskBean>> children()
	{
		if (isNull(children)) return Optional.empty();
		return Optional.of(Collections.unmodifiableSet(children));
	}
	/** @return {@link #predecessors} wrapped in unmodifiable */
	@Override @NonNull public Optional<Set<TaskBean>> predecessors()
	{
		if (isNull(predecessors)) return Optional.empty();
		return Optional.of(Collections.unmodifiableSet(predecessors));
	}
	/** @return {@link #successors} wrapped in unmodifiable   */
	@Override @NonNull public Optional<Set<TaskBean>> successors()
	{
		if (isNull(successors)) return Optional.empty();
		return Optional.of(Collections.unmodifiableSet(successors));
	}

	///////////////////////
	// additional accessors
	///////////////////////

	// --- none ---

	////////////////////////
	// relationship handling
	////////////////////////

	/** @throws IllegalArgumentException if {@code parent} is {@code this} */
	@Override @NonNull public TaskBean parent(@Nullable TaskBean parent)
	{
		if (parent == this) throw new IllegalArgumentException("parent must not be this");
		this.parent = parent;
		if (nonNull(parent)) parent.nonNullChildren().add(this);
		return this;
	}

	/**
	 * @param bean the {@link Task} to be added as child
	 * @return {@code true} if operation succeeded, {@code false} otherwise
	 * @throws IllegalArgumentException if {@code bean} is identical to {@code this} task
	 * @throws IllegalArgumentException if {@code bean} is a predecessor of {@code this} task
	 * @throws IllegalArgumentException if {@code bean} is a successor of {@code this} task
	 * @throws IllegalArgumentException if {@code bean} is already child of {@code this} task
	 */
	@Override public boolean addChild(@NonNull TaskBean bean)
	{
		if (bean == this)
			throw new IllegalArgumentException("bean can not be child of itself");
		if (predecessorsContains(bean))
			throw new IllegalArgumentException(
					"bean can not be predecessor for the same task at the same time");
		if (successorsContains(bean))
			throw new IllegalArgumentException(
					"bean can not be successor for the same task at the same time");

		if (childrenContains(bean)) return false; // no-op

		// update bidirectional relation
		bean.parent = this;
		nonNullChildren().add(bean);

		return true;
	}

	/**
	 * @param bean the {@link Task} to be added as predecessor
	 * @return {@code this}
	 * @throws IllegalArgumentException if {@code bean} is identical to {@code this} task
	 * @throws IllegalArgumentException if {@code bean} is already predecessor of {@code this} task
	 * @throws IllegalArgumentException if {@code bean} is a child of {@code this} task
	 * @throws IllegalStateException    if {@code this} could not be added to {@link #successors} of {@code bean}
	 */
	@Override public boolean addPredecessor(@NonNull TaskBean bean)
	{
		if (bean == this)
			throw new IllegalArgumentException("bean can not be predecessor of itself");
		if (successorsContains(bean))
			throw new IllegalArgumentException(
					"bean can not be predecessor and successor for the same task at the same time");
		if (childrenContains(bean))
			throw new IllegalArgumentException("a task's child can not be predecessor for it's parent");

		if (predecessorsContains(bean)) return false; // no-op

		// update bidirectional relation
		if (bean.nonNullSuccessors().add(this))
		{
			nonNullPredecessors().add(bean);
			return true;
		}

		throw new IllegalStateException("could not add this to successors of bean");
	}

	/**
	 * @param bean the {@link Task} to be added as predecessor
	 * @return {@code true} if operation succeeded, {@code false} otherwise
	 * @throws IllegalArgumentException if {@code bean} is identical to {@code this} task
	 * @throws IllegalArgumentException if {@code bean} is already predecessor of {@code this} task
	 * @throws IllegalArgumentException if {@code bean} is a child of {@code this} task
	 * @throws IllegalStateException    if {@code this} could not be added to {@link #predecessors()} of {@code bean}
	 */
	@Override public boolean addSuccessor(@NonNull TaskBean bean)
	{
		if (bean == this)
			throw new IllegalArgumentException("bean can not be successor of itself");
		if (predecessorsContains(bean))
			throw new IllegalArgumentException(
					"bean can not be predecessor and successor for the same task at the same time");
		if (childrenContains(bean))
			throw new IllegalArgumentException("a task's child can not be successor for it's parent");

		if (successorsContains(bean)) return false; // no-op

		// update bidirectional relation
		if (bean.nonNullPredecessors().add(this))
		{
			nonNullSuccessors().add(bean);
			return true;
		}

		throw new IllegalStateException("could not add this to predecessors of bean");
	}

	@Override public boolean removePredecessor(@NonNull TaskBean bean)
	{
		if (nonNull(bean.successors) && nonNull(predecessors))
		{
			if (bean.successors.remove(this)) return predecessors.remove(bean);
		}

		throw new IllegalStateException("could not remove this from successors of task");
	}

	@Override public boolean removeSuccessor(@NonNull TaskBean bean)
	{
		if (nonNull(bean.predecessors) && nonNull(successors))
		{
			if (bean.predecessors.remove(this)) return successors.remove(bean);
		}

		throw new IllegalStateException("could not remove this from predecessors of task");
	}

	@Override public boolean removeChild(@NonNull TaskBean bean)
	{
		if (nonNull(children))
		{
			// TODO should not parent == this?
			TaskBean parent = bean.parent; // remember parent in case removal has to be rolled back

			bean.parent = null;            // remove parent in child
			if (children.remove(bean)) return true;
			bean.parent = parent;          // rollback removal (reset parent in child)
		}

		throw new IllegalStateException("could not remove child from parent");
	}

	//////////////////////
	// mapstruct callbacks
	//////////////////////

	/**
	 * Maps optional return values of {@link TaskEntityDTO} field accessors to java bean style fields. This cannot be done
	 * by mapstruct automatically.
	 *
	 * @param source
	 */
	@BeforeMapping void beforeMappingDTO(@NonNull TaskEntityDTO source)
	{
		id      = source.id();
		version = source.version();
		// mapping of other fields is done via mapstruct using java-beans accessors

		source.description    ().ifPresent(this::description);
		source.startEstimated ().ifPresent(this::startEstimated);
		source.startActual    ().ifPresent(this::startActual);
		source.finishEstimated().ifPresent(this::finishEstimated);
		source.finishActual   ().ifPresent(this::finishActual);
		source.effortEstimated().ifPresent(this::effortEstimated);
		source.effortActual   ().ifPresent(this::effortActual);

		source.parent      ().ifPresent(                 this::lookupOrMapParent);
		source.predecessors().ifPresent(ts -> ts.forEach(this::lookupOrMapPredecessor));
		source.successors  ().ifPresent(ts -> ts.forEach(this::lookupOrMapSuccessor));
		source.children    ().ifPresent(ts -> ts.forEach(this::lookupOrMapChild));
	}
	@AfterMapping void afterMappingDTO(@NonNull TaskEntityDTO source) { }

	public @NonNull TaskEntityDTO toDTOSource() { return Map_Task_DTO_Bean.INSTANCE.map(this); }

	/**
	 * Maps optional return values of {@link TaskFXBean} field accessors to java bean style fields. This cannot be done
	 * by mapstruct automatically.
	 *
	 * @param source
	 */
	@BeforeMapping public void beforeMappingFX(@NonNull TaskFXBean source)
	{
		id      = source.id();
		version = source.version();
		// mapping of other fields is done via mapstruct using java-beans accessors

		taskGroup(MapperFX.INSTANCE.map(source.taskGroup()));
	//	name(source.name());

		source.description    ().ifPresent(this::description);
		source.startEstimated ().ifPresent(this::startEstimated);
		source.startActual    ().ifPresent(this::startActual);
		source.finishEstimated().ifPresent(this::finishEstimated);
		source.finishActual   ().ifPresent(this::finishActual);
		source.effortEstimated().ifPresent(this::effortEstimated);
		source.effortActual   ().ifPresent(this::effortActual);

		source.parent().map(t -> parent(MapperFX.INSTANCE.map(t)));

		source.children    ().ifPresent(ts -> ts.forEach(t -> addChild      (MapperFX.INSTANCE.map(t))));
		source.predecessors().ifPresent(ts -> ts.forEach(t -> addPredecessor(MapperFX.INSTANCE.map(t))));
		source.successors  ().ifPresent(ts -> ts.forEach(t -> addSuccessor  (MapperFX.INSTANCE.map(t))));
	}
	@AfterMapping public void afterMappingFX(@NonNull TaskFXBean source) { }

	public @NonNull TaskFXBean toFXSource() { return MapperFX.INSTANCE.map(this); }

	//////////////////////////////////////////////////////////////////////////////////////////////
	// java bean style accessors for those who do not work with fluent style accessors (mapstruct)
	//////////////////////////////////////////////////////////////////////////////////////////////

	@NonNull
	public String    getName()                                               { return name;                              }
	public void      setName(@NonNull String name)                           {   name(name);                             }

	@Nullable
	public String    getDescription()                                        { return description;                       }
	public void      setDescription(@Nullable String description)            {   this.description = description;         }

	@Nullable
	public LocalDate getStartEstimated()                                     { return startEstimated;                    }
	public void      setStartEstimated(@Nullable LocalDate startEstimated)   {   this.startEstimated = startEstimated;   }

	@Nullable
	public LocalDate getStartActual()                                        { return startActual;                       }
	public void      setStartActual(@Nullable LocalDate startActual)         {   this.startActual = startActual;         }

	@Nullable
	public LocalDate getFinishEstimated()                                    { return finishEstimated;                   }
	public void      setFinishEstimated(@Nullable LocalDate finishEstimated) {   this.finishEstimated = finishEstimated; }

	@Nullable
	public LocalDate getFinishActual()                                       { return finishActual;                      }
	public void      setFinishActual(@Nullable LocalDate finishActual)       {   this.finishActual = finishActual;       }

	@Nullable
	public Duration  getEffortEstimated()                                    { return effortEstimated;                   }
	public void      setEffortEstimated(@Nullable Duration effortEstimated)  {   this.effortEstimated = effortEstimated; }

	@Nullable
	public Duration  getEffortActual()                                       { return effortActual;                      }
	public void      setEffortActual(@Nullable Duration effortActual)        {   this.effortActual = effortActual;       }

	@NonNull private Set<TaskBean> nonNullChildren()
	{
		if (isNull(children)) children = new HashSet<>();
		return children;
	}

	@NonNull private Set<TaskBean> nonNullPredecessors()
	{
		if (isNull(predecessors)) predecessors = new HashSet<>();
		return predecessors;
	}

	@NonNull private Set<TaskBean> nonNullSuccessors()
	{
		if (isNull(successors)) successors = new HashSet<>();
		return successors;
	}

	/** {@code null} safe check for containment */
	private boolean predecessorsContains(TaskBean bean)
	{
		if (isNull(predecessors)) return false;
		return predecessors.contains(bean);
	}

	/** {@code null} safe check for containment */
	private boolean successorsContains(TaskBean bean)
	{
		if (isNull(successors)) return false;
		return successors.contains(bean);
	}

	/** {@code null} safe check for containment */
	private boolean childrenContains(TaskBean bean)
	{
		if (isNull(children)) return false;
		return children.contains(bean);
	}

	private void lookupOrMapParent(@NonNull TaskEntityDTO parent)
	{
		Optional<TaskBean> optionalParent = Map_Task_DTO_Bean.INSTANCE.getFromContext(parent);
		optionalParent.ifPresentOrElse
		(
				(p) -> parent(p),
				()            -> parent(Map_Task_DTO_Bean.INSTANCE.map(parent))
		);
	}

	private void lookupOrMapChild(@NonNull TaskEntityDTO child)
	{
		Optional<TaskBean> optionalChild = Map_Task_DTO_Bean.INSTANCE.getFromContext(child);
		optionalChild.ifPresentOrElse
		(
				(c) -> addChild(c),
				()            -> addChild(Map_Task_DTO_Bean.INSTANCE.map(child))
		);
	}

	private void lookupOrMapPredecessor(@NonNull TaskEntityDTO predecessor)
	{
		Optional<TaskBean> optionalPredecessor = Map_Task_DTO_Bean.INSTANCE.getFromContext(predecessor);
		optionalPredecessor.ifPresentOrElse
		(
				(p) -> addPredecessor(p),
				()            -> addChild(Map_Task_DTO_Bean.INSTANCE.map(predecessor))
		);
	}

	private void lookupOrMapSuccessor(@NonNull TaskEntityDTO successor)
	{
		Optional<TaskBean> optionalPredecessor = Map_Task_DTO_Bean.INSTANCE.getFromContext(successor);
		optionalPredecessor.ifPresentOrElse
		(
				(s) -> addPredecessor(s),
				()            -> addChild(Map_Task_DTO_Bean.INSTANCE.map(successor))
		);
	}
}