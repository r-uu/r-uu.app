package de.ruu.app.jeeeraaah.common.dto;

import de.ruu.app.jeeeraaah.common.Task;
import de.ruu.app.jeeeraaah.common.jpa.TaskEntityJPA;
import de.ruu.app.jeeeraaah.common.jpadto.Mapper;
import de.ruu.app.jeeeraaah.common.jpadto.TaskEntity;
import de.ruu.lib.jpa.core.mapstruct.AbstractMappedDTO;
import de.ruu.lib.util.Strings;
import jakarta.annotation.Nullable;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;

import java.time.Duration;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import static java.util.Objects.isNull;
import static java.util.Objects.nonNull;

@EqualsAndHashCode(callSuper = true)
@ToString(callSuper = true)
@Slf4j
@Getter                   // generate getter methods for all fields using lombok unless configured otherwise ({@code
@Setter                   // generate setter methods for all fields using lombok unless configured otherwise ({@code
@Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes
                          // with ide, fluent accessors will (usually / by default) be ignored by mapstruct
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, mapstruct, ...
public class TaskEntityDTO
		extends AbstractMappedDTO<TaskEntityJPA>
		implements
				TaskEntity<TaskGroupEntityDTO, TaskEntityDTO>
{
	/** mutable, but not nullable */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@NonNull private TaskGroupEntityDTO taskGroup;

	/** mutable non-null */
	// no lombok-generation of setter because of additional validation in manually created method
	@Setter(AccessLevel.PROTECTED)
	@NonNull  private String    name;
	@Nullable private String    description;
	@Nullable private LocalDate startEstimated;
	@Nullable private LocalDate startActual;
	@Nullable private LocalDate finishEstimated;
	@Nullable private LocalDate finishActual;
	@Nullable private Duration  effortEstimated;
	@Nullable private Duration  effortActual;

	/** mutable nullable */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns optional
	@Setter(AccessLevel.NONE) // provide handmade setter that handles bidirectional relation properly
	@ManyToOne
	@JoinColumn(name = "idParent")
	@Nullable private TaskEntityDTO      parent;

	/**
	 * prevent direct access to this modifiable set from outside this class, use {@link #addChild(TaskEntityDTO)} and
	 * {@link #removeChild(TaskEntityDTO)} to modify the set
	 * <p>
	 * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db
	 * (lazy)
	 */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns unmodifiable
	@Setter(AccessLevel.NONE) // no setter at all, use add method instead
	@Nullable private Set<TaskEntityDTO> children;

	/**
	 * prevent direct access to this modifiable set from outside this class, use {@link #addPredecessor(TaskEntityDTO)} and
	 * {@link #removePredecessor(TaskEntityDTO)} to modify the set
	 * <p>
	 * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db
	 * (lazy)
	 */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns unmodifiable
	@Setter(AccessLevel.NONE) // no setter at all
	@Nullable private Set<TaskEntityDTO> predecessors;

	/**
	 * prevent direct access to this modifiable set from outside this class, use {@link #addSuccessor(TaskEntityDTO)} and
	 * {@link #removeSuccessor(TaskEntityDTO)} to modify the set
	 * <p>
	 * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db
	 * (lazy)
	 */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(AccessLevel.NONE) // provide handmade getter that returns unmodifiable
	@Setter(AccessLevel.NONE) // no setter at all, use add method instead
	@Nullable private Set<TaskEntityDTO> successors;

	///////////////
  // constructors
	///////////////

	// --- none ---

	/** provide handmade required args constructor to properly handle relationships */
	public TaskEntityDTO(@NonNull TaskGroupEntityDTO taskGroup, @NonNull String name)
	{
		this.taskGroup = taskGroup;
		name(name);
		taskGroup.addTask(this);
	}

	////////////////////////////////////////////////////////////////////////
	// fluent style accessors generated by lombok if not specified otherwise
	////////////////////////////////////////////////////////////////////////

	/**
	 * manually created fluent setter with extra parameter check (see throws documentation)
	 * @param name non-null, non-empty, non-blank
	 * @return {@code this}
	 * @throws IllegalArgumentException if {@code name} parameter is empty or blank
	 * @throws NullPointerException     if {@code name} parameter is {@code null}
	 */
	@NonNull public TaskEntityDTO name(@NonNull String name)
	{
		if (Strings.isEmptyOrBlank(name)) throw new IllegalArgumentException("name must not be empty nor blank");
		this.name = name;
		return this;
	}

	@Override @NonNull public TaskGroupEntityDTO      taskGroup      () { return taskGroup; }
	@Override @NonNull public String                  name           () { return name;      }

	@Override @NonNull public Optional<String>        description    () { return Optional.ofNullable(description);     }
	@Override @NonNull public Optional<LocalDate>     startEstimated () { return Optional.ofNullable(startEstimated);  }
	@Override @NonNull public Optional<LocalDate>     finishEstimated() { return Optional.ofNullable(finishEstimated); }
	@Override @NonNull public Optional<LocalDate>     startActual    () { return Optional.ofNullable(startActual);     }
	@Override @NonNull public Optional<LocalDate>     finishActual   () { return Optional.ofNullable(finishActual);    }
	@Override @NonNull public Optional<Duration>      effortEstimated() { return Optional.ofNullable(effortEstimated); }
	@Override @NonNull public Optional<Duration>      effortActual   () { return Optional.ofNullable(effortActual);    }

	@Override @NonNull public Optional<TaskEntityDTO> parent         () { return Optional.ofNullable(parent); }

	/** @return {@link #children wrapped in unmodifiable      */
	@Override @NonNull public Optional<Set<TaskEntityDTO>> children()
	{
		if (nonNull(children))
				return Optional.of(Collections.unmodifiableSet(children));
		return Optional.empty();
	}
	/** @return {@link #predecessors} wrapped in unmodifiable */
	@Override @NonNull public Optional<Set<TaskEntityDTO>> predecessors()
	{
		if (nonNull(predecessors))
				return Optional.of(Collections.unmodifiableSet(predecessors));
		return Optional.empty();
	}
	/** @return {@link #successors} wrapped in unmodifiable   */
	@Override @NonNull public Optional<Set<TaskEntityDTO>> successors()
	{
		if (nonNull(successors))
				return Optional.of(Collections.unmodifiableSet(successors));
		return Optional.empty();
	}

	///////////////////////
	// additional accessors
	///////////////////////

	// --- none ---

	////////////////////////
	// relationship handling
	////////////////////////

	/** @throws IllegalArgumentException if {@code parent} is {@code this} */
	@Override @NonNull public TaskEntityDTO parent(@Nullable TaskEntityDTO parent)
	{
		if (parent == this) throw new IllegalArgumentException("parent must not be this");
		this.parent = parent;
		if (nonNull(parent)) parent.nonNullChildren().add(this);
		return this;
	}

	/**
	 * @param dto the {@link Task} to be added as child
	 * @return {@code true} if operation succeeded, {@code false} otherwise
	 * @throws IllegalArgumentException if {@code dto} is identical to {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is a predecessor of {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is a successor of {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is already child of {@code this} task
	 */
	@Override public boolean addChild(@NonNull TaskEntityDTO dto)
	{
		if (dto == this)
				throw new IllegalArgumentException("dto can not be child of itself");
		if (predecessorsContains(dto))
				throw new IllegalArgumentException(
						"dto can not be predecessor for the same task at the same time");
		if (successorsContains(dto))
				throw new IllegalArgumentException(
						"dto can not be successor for the same task at the same time");

		if (childrenContains(dto)) return false; // no-op

		// update bidirectional relation
		dto.parent = this;
		nonNullChildren().add(dto);

		return true;
	}

	/**
	 * @param dto the {@link Task} to be added as predecessor
	 * @return {@code this}
	 * @throws IllegalArgumentException if {@code dto} is identical to {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is already predecessor of {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is a child of {@code this} task
	 * @throws IllegalStateException    if {@code this} could not be added to {@link #successors} of {@code dto}
	 */
	@Override public boolean addPredecessor(@NonNull TaskEntityDTO dto)
	{
		if (dto == this)
				throw new IllegalArgumentException("dto can not be predecessor of itself");
		if (successorsContains(dto))
				throw new IllegalArgumentException(
						"dto can not be predecessor and successor for the same task at the same time");
		if (childrenContains(dto))
				throw new IllegalArgumentException("a task's child can not be predecessor for it's parent");

		if (predecessorsContains(dto)) return false; // no-op

		// update bidirectional relation
		if (dto.nonNullSuccessors().add(this))
		{
			nonNullPredecessors().add(dto);
			return true;
		}

		throw new IllegalStateException("could not add this to successors of dto");
	}

	/**
	 * @param dto the {@link Task} to be added as predecessor
	 * @return {@code true} if operation succeeded, {@code false} otherwise
	 * @throws IllegalArgumentException if {@code dto} is identical to {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is already predecessor of {@code this} task
	 * @throws IllegalArgumentException if {@code dto} is a child of {@code this} task
	 * @throws IllegalStateException    if {@code this} could not be added to {@link #predecessors()} of {@code dto}
	 */
	@Override public boolean addSuccessor(@NonNull TaskEntityDTO dto)
	{
		if (dto == this)
				throw new IllegalArgumentException("dto can not be successor of itself");
		if (predecessorsContains(dto))
				throw new IllegalArgumentException(
						"dto can not be predecessor and successor for the same task at the same time");
		if (childrenContains(dto))
				throw new IllegalArgumentException("a task's child can not be successor for it's parent");

		if (successorsContains(dto)) return false; // no-op

		// update bidirectional relation
		if (dto.nonNullPredecessors().add(this))
		{
			nonNullSuccessors().add(dto);
			return true;
		}

		throw new IllegalStateException("could not add this to predecessors of dto");
	}

	@Override public boolean removePredecessor(@NonNull TaskEntityDTO dto)
	{
		if (nonNull(dto.successors))
				if (dto.successors.remove(this))
						if (nonNull(predecessors))
								return predecessors.remove(dto);

		throw new IllegalStateException("could not remove this from successors of dto");
	}

	@Override public boolean removeSuccessor(@NonNull TaskEntityDTO dto)
	{
		if (nonNull(dto.predecessors))
				if (dto.predecessors.remove(this))
						if (nonNull(successors))
								return successors.remove(dto);

		throw new IllegalStateException("could not remove this from predecessors of dto");
	}

	@Override public boolean removeChild(@NonNull TaskEntityDTO dto)
	{
		TaskEntityDTO entityParent = dto.parent;

		if (nonNull(children))
		{
			dto.parent = null;
			boolean result = children.remove(dto);

			if (result == false)
			{
				// rollback changes
				dto.parent = entityParent;
			}
			return result;
		}

		throw new IllegalStateException("could not remove entity from children");
	}

	//////////////////////
	// mapstruct callbacks
	//////////////////////

	@Override public void beforeMapping(@NonNull TaskEntityJPA source)
	{
		super.beforeMapping(source);
		// mapping of other fields is done via mapstruct using java-beans accessors

		source.parent      ().ifPresent(                 this::lookupOrMapParent);
		source.predecessors().ifPresent(ts -> ts.forEach(this::lookupOrMapPredecessor));
		source.successors  ().ifPresent(ts -> ts.forEach(this::lookupOrMapSuccessor));
		source.children    ().ifPresent(ts -> ts.forEach(this::lookupOrMapChild));

		if (source.description    ().isPresent()) description    (source.description    ().get());
		if (source.startEstimated ().isPresent()) startEstimated (source.startEstimated ().get());
		if (source.startActual    ().isPresent()) startActual    (source.startActual    ().get());
		if (source.finishEstimated().isPresent()) finishEstimated(source.finishEstimated().get());
		if (source.finishActual   ().isPresent()) finishActual   (source.startActual    ().get());
		if (source.effortEstimated().isPresent()) effortEstimated(source.effortEstimated().get());
		if (source.effortActual   ().isPresent()) effortActual   (source.effortActual   ().get());
	}
	@Override public void afterMapping(@NonNull TaskEntityJPA source) { }

	@Override public @NonNull TaskEntityJPA toSource() { return Mapper.INSTANCE.map(this); }

	//////////////////////////////////////////////////////////////////////////////////////////////
	// java bean style accessors for those who do not work with fluent style accessors (mapstruct)
	//////////////////////////////////////////////////////////////////////////////////////////////

	public @NonNull String getName()
			{ return name;                              }
	public          void   setName(@NonNull String name)
			{   name(name);                             }

	public @Nullable String getDescription()
			{ return description;                       }
	public           void   setDescription(@Nullable String description)
			{   this.description = description;         }

	public @Nullable LocalDate getStartEstimated()
			{ return startEstimated;                    }
	public           void      setStartEstimated(@Nullable LocalDate startEstimated)
			{   this.startEstimated = startEstimated;   }

	public @Nullable LocalDate getStartActual()
			{ return startActual;                       }
	public           void      setStartActual(@Nullable LocalDate startActual)
			{   this.startActual = startActual;         }

	public @Nullable LocalDate getFinishEstimated()
			{ return finishEstimated;                   }
	public           void      setFinishEstimated(@Nullable LocalDate finishEstimated)
			{   this.finishEstimated = finishEstimated; }

	public @Nullable LocalDate getFinishActual()
			{ return finishActual;                      }
	public           void      setFinishActual(@Nullable LocalDate finishActual)
			{   this.finishActual = finishActual;       }

	public @Nullable Duration getEffortEstimated()
			{ return effortEstimated;                   }
	public           void     setEffortEstimated(@Nullable Duration effortEstimated)
			{   this.effortEstimated = effortEstimated; }

	public @Nullable Duration getEffortActual()
			{ return effortActual;                      }
	public           void     setEffortActual(@Nullable Duration effortActual)
			{   this.effortActual = effortActual;       }

	public @Nullable TaskEntityDTO getParent()
			{ return parent;                            }
	public void setParent(@Nullable TaskEntityDTO parent)
			{   this.parent = parent;                   }

	@NonNull private Set<TaskEntityDTO> nonNullChildren()
	{
		if (isNull(children)) children = new HashSet<>();
		return children;
	}

	@NonNull private Set<TaskEntityDTO> nonNullPredecessors()
	{
		if (isNull(predecessors)) predecessors = new HashSet<>();
		return predecessors;
	}

	@NonNull private Set<TaskEntityDTO> nonNullSuccessors()
	{
		if (isNull(successors)) successors = new HashSet<>();
		return successors;
	}

	/** {@code null} safe check for containment */
	private boolean predecessorsContains(TaskEntityDTO entity)
	{
		if (isNull(predecessors)) return false;
		return predecessors.contains(entity);
	}

	/** {@code null} safe check for containment */
	private boolean successorsContains(TaskEntityDTO entity)
	{
		if (isNull(successors)) return false;
		return successors.contains(entity);
	}

	/** {@code null} safe check for containment */
	private boolean childrenContains(TaskEntityDTO entity)
	{
		if (isNull(children)) return false;
		return children.contains(entity);
	}

	private void lookupOrMapParent(TaskEntityJPA parent)
	{
		Optional<TaskEntityDTO> optionalParentDTO = Mapper.INSTANCE.getFromContext(parent);

		if (optionalParentDTO.isPresent())
		{
			parent(optionalParentDTO.get());
		}
		else
		{
			parent(parent.toTarget());
		}
	}

	private void lookupOrMapChild(TaskEntityJPA child)
	{
		Optional<TaskEntityDTO> optionalChildDTO = Mapper.INSTANCE.getFromContext(child);

		if (optionalChildDTO.isPresent())
		{
			addChild(optionalChildDTO.get());
		}
		else
		{
			addChild(child.toTarget());
		}
	}

	private void lookupOrMapPredecessor(TaskEntityJPA predecessor)
	{
		Optional<TaskEntityDTO> optionalPredecessorDTO = Mapper.INSTANCE.getFromContext(predecessor);

		if (optionalPredecessorDTO.isPresent())
		{
			addPredecessor(optionalPredecessorDTO.get());
		}
		else
		{
			addPredecessor(predecessor.toTarget());
		}
	}

	private void lookupOrMapSuccessor(TaskEntityJPA successor)
	{
		Optional<TaskEntityDTO> optionalSuccessorDTO = Mapper.INSTANCE.getFromContext(successor);

		if (optionalSuccessorDTO.isPresent())
		{
			addSuccessor(optionalSuccessorDTO.get());
		}
		else
		{
			addSuccessor(successor.toTarget());
		}
	}
}